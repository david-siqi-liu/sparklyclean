/**
 * Example pipeline for training a GradientBoostedTrees model on the labeled dataset
 *
 * Copyright (c) 2020 David Liu
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the "Software"), to deal
 * in the Software without restriction, including without limitation the rights
 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 * copies of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in all
 * copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
 * SOFTWARE.
 *
 */

package com.davidsiqiliu.sparklyclean

import org.apache.hadoop.fs.{FileSystem, Path}
import org.apache.log4j.Logger
import org.apache.spark.ml.classification.{GBTClassificationModel, GBTClassifier}
import org.apache.spark.ml.linalg.{Matrices, Matrix, Vectors}
import org.apache.spark.ml.{Pipeline, PipelineModel}
import org.apache.spark.sql.{Dataset, Row, SparkSession}
import org.apache.spark.{SparkConf, SparkContext}
import org.rogach.scallop.{ScallopConf, ScallopOption}

class TrainDupClassifierConf(args: Seq[String]) extends ScallopConf(args) {
  mainOptions = Seq(input, model)
  val input: ScallopOption[String] = opt[String](descr = "Path to training labeled points", required = true)
  val model: ScallopOption[String] = opt[String](descr = "Path to output models", required = true)
  verify()
}

object TrainDupClassifier {
  val log: Logger = Logger.getLogger(getClass.getName)

  def trainGradientBoostedTrees(data: Dataset[Row]): PipelineModel = {
    // GBT
    val gbt = new GBTClassifier()
      .setLabelCol("label")
      .setFeaturesCol("features")
      .setMaxIter(100)
      .setMaxDepth(3)
      .setFeatureSubsetStrategy("auto")
      .setSeed(647)

    // Chain indexers, GBT and converter in a Pipeline
    val pipeline = new Pipeline().setStages(Array(gbt))

    // Split into training (70%) and testing (30%) sets
    val Array(training, testing) = data.randomSplit(Array(0.7, 0.3), seed = 647)

    // Train model
    val model = pipeline.fit(training)

    // Make predictions
    val predictions = model.transform(testing)

    // Evaluate
    val TN: Double = predictions.select("label", "prediction").filter("label = 0 and prediction = 0").count
    val TP: Double = predictions.select("label", "prediction").filter("label = 1 and prediction = 1").count
    val FP: Double = predictions.select("label", "prediction").filter("label = 0 and prediction = 1").count
    val FN: Double = predictions.select("label", "prediction").filter("label = 1 and prediction = 0").count
    val total: Double = predictions.select("label").count.toDouble

    val confusionMatrix: Matrix = Matrices.dense(2, 2, Array(TN, FP, FN, TP))
    log.info("\nConfusion Matrix ([TN, FN], [FP, TP]):\n" + confusionMatrix)

    val accuracy: Double = (TN + TP) / total
    val precision: Double = TP / (TP + FP)
    val recall: Double = TP / (TP + FN)
    val F1: Double = 2 * (precision * recall) / (precision + recall)
    log.info(f"Accuracy: ${accuracy * 100}%.2f%%")
    log.info(f"Precision: ${precision * 100}%.2f%%")
    log.info(f"Recall: ${recall * 100}%.2f%%")
    log.info(f"F1: ${F1 * 100}%.2f%%")

    model
  }

  def main(argv: Array[String]): Unit = {

    val args = new TrainDupClassifierConf(argv)

    val conf = new SparkConf().setAppName("SparklyClean - TrainDupClassifier")
    val sc = new SparkContext(conf)
    val sparkSession = SparkSession.builder.getOrCreate
    import sparkSession.implicits._

    // Read in labeled points generated by GenerateLabeledPoints
    val data = sc.textFile(args.input())
      .map(
        line => {
          // [t1Id, t2Id, label, feature1, feature2, ...]
          val tokens: Array[String] = line.split(",")
          val pair: String = s"(${tokens(0)},${tokens(1)})"
          val label: Double = tokens(2).toDouble
          val features: Array[Double] = tokens.slice(3, tokens.length).map(_.toDouble)

          (pair, label, Vectors.dense(features))
        }
      ).toDF("id", "label", "features")
    log.info("\nInput: " + args.input())

    // Train a pipeline and model
    val pipelineModel = trainGradientBoostedTrees(data)

    // Output model specifics and feature importance
    val model = pipelineModel.stages(0).asInstanceOf[GBTClassificationModel]
    log.info("\nLearned GradientBoostedTrees model:\n" + model.toDebugString)
    log.info("\nFeature Importance:\n" + model.featureImportances.toString)

    // Save pipeline and model
    if (args.model() != "") {
      FileSystem.get(sc.hadoopConfiguration).delete(new Path(args.model()), true)
      pipelineModel.write.overwrite().save(args.model())
      log.info("\nSaved model: " + args.model())
    }

    sc.stop()
  }
}
